// Lugano Eventi Bot
// Lugano Eventi variables
var al_base_uri = "https://www.agendalugano.ch/api/v2/";
var api_key     = "API_KEY";
var locale      = "it";
// Telegram variables
var token        = "TOKEN_KEY";
var telegram_url = "https://api.telegram.org/bot" + token;
// Google variables
var webapp_url   = "https://script.google.com/macros/s/GOOGLE_WEBAPP_KEY/exec";
var months_i     = ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"];
var year_co      = [];
var mont_co      = [];
var day_co       = [];
var even_co      = [];
var link_co      = [];
var cate_co_na   = [];
var cate_co_id   = [];
var quar_co_na   = [];
var quar_co_id   = [];
var free_co_na   = [];
var free_co_id   = [];

// Support functions
function getMe() {
  var response = UrlFetchApp.fetch(telegram_url + "/getMe");
  Logger.log(response.getContentText());
}
function getUpdates() {
  var response = UrlFetchApp.fetch(telegram_url + "/getUpdates");
  Logger.log(response.getContentText());
}
function setWebhook() {
  var response = UrlFetchApp.fetch(telegram_url + "/setWebhook?url=" + webapp_url);
  Logger.log(response.getContentText());
}
function doGet(e) {
  return HtmlService.createHtmlOutput("Hey there! Send POST request instead!");
}

//https://medium.com/@lanceconzett/parsing-json-in-google-sheets-with-zendesk-and-google-script-dfd82a37edb4
//https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON
  
function updateEvents() {
  var tod = new Date();
  tod.setHours(0,0,0,0);
  var toda_y = tod.getFullYear();
  var toda_m = tod.getMonth()+1;
  var toda_d = tod.getDate();
  if (toda_m < 10) toda_m = "0" + toda_m;
  if (toda_d < 10) toda_d = "0" + toda_d;
  var today = toda_y + "-" + toda_m + "-" + toda_d;
  // call to determine quarters and total number of them
  var url_qua = al_base_uri + "venues/quarters?api_key=" + api_key + "&locale=" + locale;
  var url_qua_n = encodeURI(url_qua); // mandatory otherwise it doesn't process quotes!!
  var qua_response = UrlFetchApp.fetch(url_qua_n);
  var qua_json = qua_response.getContentText();
  var qua_results = JSON.parse(qua_json);
  var tot_quarters = qua_results.length;
  // call to determine number of categories
  var url_cat = al_base_uri + "subscribers/" + api_key + "?locale=" + locale;
  var url_cat_n = encodeURI(url_cat); // mandatory otherwise it doesn't process quotes!!
  var cat_response = UrlFetchApp.fetch(url_cat_n);
  var cat_json = cat_response.getContentText();
  var cat_results = JSON.parse(cat_json);
  var tot_categories = cat_results['event_categories'].length;
  // call to determine number of records
  var page = 1;
  var per_page = 40;
  var options = '{"conditions":{"event_date":{"from":"' + today + '"}},"ordering": [{"field": "date", "direction": "asc"},{"field": "time", "direction": "asc"}], "pagination": {"page":' + page + ', "per_page":' + per_page + '}}';
  var urlo = al_base_uri + "events?api_key=" + api_key + "&locale=" + locale + "&options=" + options;
  var urln = encodeURI(urlo); // mandatory otherwise it doesn't process quotes!!
  var response = UrlFetchApp.fetch(urln);
  var json = response.getContentText();
  var results = JSON.parse(json);
  var tot_pages = Math.floor(results.total/per_page)+1;
  // subsequent calls
  var record = [];
  for (var k = 1; k <= tot_pages; k++){
    if (k < tot_pages)      var per_page_n = per_page;
    else if (k = tot_pages) var per_page_n = Math.floor((results.total/per_page-(tot_pages-1))*per_page);
    var page_n = k;
    var opts_n = '{"conditions":{"event_date":{"from":"' + today + '"}},"ordering": [{"field": "date", "direction": "asc"},{"field": "time", "direction": "asc"}], "pagination": {"page":' + page_n + ', "per_page":' + per_page + '}}';
    var urlo_n = al_base_uri + "events?api_key=" + api_key + "&locale=" + locale + "&options=" + opts_n;
    var urln_n = encodeURI(urlo_n); // mandatory otherwise it doesn't process quotes!!
    var resp_n = UrlFetchApp.fetch(urln_n);
    var json_n = resp_n.getContentText();
    var resu_n = JSON.parse(json_n);
    for (var n = 0; n < per_page_n; n++){
      var root = resu_n['events'][n];
      // start date & end date
      var rec_startdate = root['event_dates'][0]['start_date'];
      var rec_enddate = root['event_dates'][0]['end_date'];
      // event title
      var rec_title = root['text']['title'];
      // event status (published, cancelled, etc.)
      var rec_status = root['status'];
      // free or paid event
      var rec_free = root['free'];
      if (rec_free == 1) { var rec_free_id = 0; var rec_free_na = "Free"; }
      else { var rec_free_id = 1; var rec_free_na = "Paid"; }
      // event url
      var rec_url = "https://luganoeventi.ch/it/eventi/" + root['id'] + "/" + root['text']['slug'];
      // city and quarter of the event
      var rec_city_name = root['event_dates'][0]['venue']['city_name'];
      var rec_quarter_name = root['event_dates'][0]['venue']['quarter'];
      for (q = 0; q < tot_quarters; q++) {
        if (rec_quarter_name == qua_results[q]) { var rec_quarter_id =  q+1; var rec_city_name = "Lugano"; }
      }
      // category of the event
      for (c = 0; c < tot_categories; c++) {
        if(resu_n['events'] && resu_n['events'][n] && resu_n['events'][n]['categories'] && resu_n['events'][n]['categories'][c] && resu_n['events'][n]['categories'][c]['id']) {  
          var rec_category_id = root['categories'][c]['id']; 
          var rec_category_name = root['categories'][c]['name'];
          if (rec_status.indexOf("published") > -1 && rec_city_name.indexOf("Lugano") > -1) {
            record.push([rec_category_id,rec_category_name,rec_quarter_id,rec_quarter_name,rec_free_id,rec_free_na,rec_startdate,rec_enddate,rec_title,rec_url]);
          }
        }
      }
    }
  }
  // expand records (one record per date)
  var data = record.reduce(function(p,c) {
    var even_cate_id  = c[0];
    var even_cate_na  = c[1];
    var even_quar_id  = c[2];
    var even_quar_na  = c[3];
    var even_free_id  = c[4];
    var even_free_na  = c[5];
    var even_sta_date = new Date(c[6]);
    even_sta_date.setHours(0,0,0,0);
    var even_end_date = new Date(c[7]);
    even_end_date.setHours(23,59,59,1000);
    var even_name     = c[8];
    var even_link_it  = c[9];
    while (even_sta_date.getTime()<=even_end_date.getTime()) {
      p.push ([new Date(even_sta_date), even_cate_id, even_cate_na, even_quar_id, even_quar_na, even_free_id, even_free_na, even_name, even_link_it]);
      even_sta_date.setDate(even_sta_date.getDate()+1);
    }
    return p;
  }, []);
  // sort by date
  data.sort(function(x,y){
    var xp = x[0];
    var yp = y[0];
    return xp == yp ? 0 : xp < yp ? -1 : 1;
  });
  // fill in initial arrays
  for (var j = 0; j < data.length; j++) {
    if(data[j][0] >= tod) {
      year_co.push([data[j][0].getFullYear()]);
      mont_co.push([data[j][0].getMonth()+1]);
      day_co.push([data[j][0].getDate()]);
      cate_co_id.push([data[j][1]]);
      cate_co_na.push([data[j][2]]);
      quar_co_id.push([data[j][3]]);
      quar_co_na.push([data[j][4]]);
      free_co_id.push([data[j][5]]);
      free_co_na.push([data[j][6]]);
      even_co.push([data[j][7]]);
      link_co.push([data[j][8]]);
    }
  }
}

function waitingMessage(lang,user_id){
  if (lang == "IT") message = "**** Si prega di attendere mentre il bot aggiorna i dati. ****";
  if (lang == "EN") message = "**** Please wait while the bot updates the data. ****";
  sendText(user_id,message);
}

// *********************************** Additional commands

// start - Start bot
// credits - Info about bot creator
// today - Info about today's events
// tomorrow - Info about tomorrow's events

// User: Click on /credits
// Bot: Reply with a message providing information about creator
function credits(user_na,user_id) {
  var input = [];
  input.push(["<< Back / Indietro","/start"]);
  var keyBoard = ({inline_keyboard: input.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),resize_keyboard:true});
  var answer_en = "Dear " + user_na + ", you can contact the creator of this bot clicking here: @SalM_CH";
  var answer_it = "<i>Caro/a</i> " + user_na + " <i>puoi contattare il creatore di questo bot cliccando qui:</i> @SalM_CH"
  var answer = answer_en + "\n \n" + answer_it;
  sendText(user_id,answer,keyBoard);
}

// User: Click on /today (/IT_99_99_99_2020_09_13)
// Bot: Reply with a message providing information about today events
function today(user_id) {
  var today  = new Date();
  var toda_y = today.getFullYear();
  var toda_m = today.getMonth()+1;
  var toda_d = today.getDate();
  if (toda_m < 10) toda_m = "0" + toda_m;
  if (toda_d < 10) toda_d = "0" + toda_d;
  var todayr = "/EN_99_99_99" + "_" + toda_y + "_" + toda_m + "_" + toda_d;
  event(user_id,todayr);
}

// User: Click on /tomorrow
// Bot: Reply with a message providing information about tomorrow events
function tomorrow(user_id) {
  var toda_d = new Date().getDate();
  var tomor  = new Date();
  tomor.setDate(toda_d+1);
  var tomo_y = tomor.getFullYear();
  var tomo_m = tomor.getMonth()+1;
  var tomo_d = tomor.getDate();
  if (tomo_m < 10) tomo_m = "0" + tomo_m;
  if (tomo_d < 10) tomo_d = "0" + toda_d;
  var tomorr = "/EN_99_99_99" + "_" + tomo_y + "_" + tomo_m + "_" + tomo_d;
  event(user_id,tomorr);
}

// *********************************** Workflow 
// User: Click on /start
// Bot: Reply with a message asking to click on the button below to choose the preferred category
function start(user_na,user_id) {
  var input = [];
  input.push(["Language / Lingua","/lang"]);
  var keyBoard = ({inline_keyboard: input.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),resize_keyboard:true});
  var answer_en = "Welcome " + user_na + " to the <b>Lugano Eventi bot</b>.\nPlease click on the button below to choose your language.";
  var answer_it = "<i>Benvenuto/a</i> " + user_na + " <i>all'interno del <b>Lugano Eventi bot</b>.\nSi prega di cliccare sul bottone sottostante per selezionare la lingua.</i>"
  var answer = answer_en + "\n \n" + answer_it;
  sendText(user_id,answer,keyBoard);
}

// User: Click on /lang
// Bot: Reply with a message asking to click on preferred language
function lang(user_id) {
  var input = [];
  input.push(["English" ,"/EN"]);
  input.push(["Italiano","/IT"]);
  var keyBoard  = ({inline_keyboard: input.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  var answer = "Please indicate your preferred language.\n<i>Si prega di selezionare la lingua desiderata.</i>";
  sendText(user_id,answer,keyBoard);
}

// User: Click on /EN or /IT
// Bot: Reply with a message asking to select a category.
function category(user_id,input) {
  var lang   = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var unique = [];
  if (lang == "EN") unique.push(["ALL",input + "_99"]);
  if (lang == "IT") unique.push(["TUTTO",input + "_99"]);
  for (var n = 0; n < cate_co_id.length; n++) {
    if (cate_co_id[n][0] < 10) cate_co_id[n][0] = "0" + cate_co_id[n][0];
    if (unique.join().indexOf(cate_co_id[n].join()) == -1) {
      unique.push([String(cate_co_na[n][0]), "/" + lang + "_" + String(cate_co_id[n][0])]);
    }
  }
  if (lang == "EN") {
    unique.push(["<< Back"    ,"/lang"]);
    var answer = "Please select the category of your interest.";
  }
  if (lang == "IT") {
    unique.push(["<< Indietro","/lang"]);
    var answer = "Si prega di selezionare la categoria di interesse.";
  }
  var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  sendText(user_id,answer,keyBoard);
}

// User: Click on a category (e.g., /IT_99)
// Bot: Reply with a message asking to select a quarter.
function quarter(user_id,input) {
  var lang  = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var cat_n = Number(input.substring(4,6));
  var cat_c = input.substring(4,6);
  var unique = [];
  if (lang == "EN") unique.push(["ALL",input + "_99"]);
  if (lang == "IT") unique.push(["TUTTI",input + "_99"]);
  if (cat_n < 99) {
    for (var n = 0; n < quar_co_id.length; n++) {
      if (quar_co_id[n][0] < 10) quar_co_id[n][0] = "0" + quar_co_id[n][0];
      if (cate_co_id[n] == cat_n && unique.join().indexOf(quar_co_id[n].join()) == -1) {
        unique.push([String(quar_co_na[n][0]), "/" + lang + "_" + cat_c + "_" + String(quar_co_id[n][0])]);
      }
    }
  }
  if (cat_n == 99) { 
    for (var n = 0; n < quar_co_id.length; n++) {
      if (unique.join().indexOf(quar_co_id[n].join()) == -1) {
        unique.push([String(quar_co_na[n][0]), "/" + lang  + "_" + cat_c + "_" + String(quar_co_id[n][0])]);
      }
    }
  }  
  if (lang == "EN") {
    unique.push(["<< Back"    ,"/" + lang]);
    var answer = "Please select the quarter of your interest.";
  }
  if (lang == "IT") {
    unique.push(["<< Indietro","/" + lang]);
    var answer = "Si prega di selezionare il quartiere di interesse.";
  }
  var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  sendText(user_id,answer,keyBoard);
}

// User: Click on a quarter (e.g., /IT_99_99)
// Bot: Reply with a message asking to select free or paid events.
function freepaid(user_id,input) {
  var lang  = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var cat_n = Number(input.substring(4,6));
  var cat_c = input.substring(4,6);
  var qua_n = Number(input.substring(7,9));
  var qua_c = input.substring(7,9);
  var unique = [];
  if (lang == "EN") unique.push(["ALL",input + "_99"]);
  if (lang == "IT") unique.push(["TUTTI",input + "_99"]);
  if (qua_n < 99 && cat_n < 99) {
    for (var n = 0; n < free_co_id.length; n++) {
      if (free_co_id[n][0] < 10) free_co_id[n][0] = "0" + free_co_id[n][0];
      if (quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && unique.join().indexOf(free_co_id[n].join()) == -1) {
        unique.push([String(free_co_na[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + String(free_co_id[n][0])]);
      }
    }
  }  
  if (qua_n < 99 && cat_n == 99) {
    for (var n = 0; n < free_co_id.length; n++) {
      if (free_co_id[n][0] < 10) free_co_id[n][0] = "0" + free_co_id[n][0];
      if (quar_co_id[n] == qua_n && unique.join().indexOf(free_co_id[n].join()) == -1) {
        unique.push([String(free_co_na[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + String(free_co_id[n][0])]);
      }
    }
  }   
  if (qua_n == 99 && cat_n < 99) {
    for (var n = 0; n < free_co_id.length; n++) {
      if (free_co_id[n][0] < 10) free_co_id[n][0] = "0" + free_co_id[n][0];
      if (cate_co_id[n] == cat_n && unique.join().indexOf(free_co_id[n].join()) == -1) {
        unique.push([String(free_co_na[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + String(free_co_id[n][0])]);
      }
    }
  } 
  if (qua_n == 99 && cat_n == 99) {
    for (var n = 0; n < free_co_id.length; n++) {
      if (free_co_id[n][0] < 10) free_co_id[n][0] = "0" + free_co_id[n][0];
      if (unique.join().indexOf(free_co_id[n].join()) == -1) {
        unique.push([String(free_co_na[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + String(free_co_id[n][0])]);
      }
    }
  }     
  if (lang == "EN") {
    unique.push(["<< Back"    ,"/" + lang + "_" + cat_c]);
    var answer = "Please select which type of event (free / paid) you prefer.";
  }
  if (lang == "IT") {
    unique.push(["<< Indietro","/" + lang + "_" + cat_c]);
    var answer = "Si prega di selezionare il tipo di evento (gratuito / a pagamento) che preferisci.";
  }
  var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  sendText(user_id,answer,keyBoard);
}

// User: Click on a free/paid event (e.g., /IT_99_99_99)
// Bot: Reply with a message asking to choose between events of the present day or select a specific date (based on the chosen language).
function cho_date(user_id,input){
  var lang  = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var cat_n = Number(input.substring(4,6));
  var cat_c = input.substring(4,6);
  var qua_n = Number(input.substring(7,9));
  var qua_c = input.substring(7,9);
  var fre_n = Number(input.substring(10,12));
  var fre_c = input.substring(10,12); 
  var menu   = [];
  // today
  var today  = new Date();
  var toda_y = today.getFullYear();
  var toda_m = today.getMonth()+1;
  var toda_d = today.getDate();
  if (toda_m < 10) toda_m = "0" + toda_m;
  if (toda_d < 10) toda_d = "0" + toda_d;
  var todayr = input + "_" + toda_y + "_" + toda_m + "_" + toda_d;
  if (lang == "EN") menu.push(["Today", input + "_" + toda_y + "_" + toda_m + "_" + toda_d]);
  if (lang == "IT") menu.push(["Oggi" , input + "_" + toda_y + "_" + toda_m + "_" + toda_d]);
  // tomorrow
  var tomor  = new Date();
  tomor.setDate(today.getDate()+1);
  var tomo_y = tomor.getFullYear();
  var tomo_m = tomor.getMonth()+1;
  var tomo_d = tomor.getDate();
  if (tomo_m < 10) tomo_m = "0" + tomo_m;
  if (tomo_d < 10) tomo_d = "0" + toda_d;
  var tomorr = input + "_" + tomo_y + "_" + tomo_m + "_" + tomo_d;
  if (lang == "EN") menu.push(["Tomorrow", input + "_" + tomo_y + "_" + tomo_m + "_" + tomo_d]);
  if (lang == "IT") menu.push(["Domani"  , input + "_" + tomo_y + "_" + tomo_m + "_" + tomo_d]);
  // check weekend
  var tmp = today.getDay();
  if (today.getDay() == 0) var tmp = 7;
  // saturday
  if (tmp < 5) {
    var saturd = new Date();
    saturd.setDate(today.getDate()+6-today.getDay());
    var satu_y = saturd.getFullYear();
    var satu_m = saturd.getMonth()+1;
    var satu_d = saturd.getDate();
    if (satu_m < 10) satu_m = "0" + satu_m;
    if (satu_d < 10) satu_d = "0" + satu_d;
    var saturr = input + "_" + satu_y + "_" + satu_m + "_" + satu_d;
    if (lang == "EN") menu.push(["Saturday", input + "_" + satu_y + "_" + satu_m + "_" + satu_d]);
    if (lang == "IT") menu.push(["Sabato"  , input + "_" + satu_y + "_" + satu_m + "_" + satu_d]);
  }
  // sunday
  if (tmp < 6) {
    var sunday = new Date();
    sunday.setDate(today.getDate()+7-today.getDay());
    var sund_y = sunday.getFullYear();
    var sund_m = sunday.getMonth()+1;
    var sund_d = sunday.getDate();
    if (sund_m < 10) sund_m = "0" + sund_m;
    if (sund_d < 10) sund_d = "0" + sund_d;
    var sundar = input + "_" + sund_y + "_" + sund_m + "_" + sund_d;
    if (lang == "EN") menu.push(["Sunday"  , input + "_" + sund_y + "_" + sund_m + "_" + sund_d]);
    if (lang == "IT") menu.push(["Domenica", input + "_" + sund_y + "_" + sund_m + "_" + sund_d]);
  }
  if (lang == "EN") {
    menu.push(["Another date", input + "_" + "OTH"]);
    menu.push(["<< Back"     , "/" + lang + "_" + cat_c + "_" + qua_c]);
    var answer = "Please indicate the date of your interest.";
  } 
  if (lang == "IT") {
    menu.push(["Altra data"  , input + "_" + "OTH"]);
    menu.push(["<< Indietro" , "/" + lang + "_" + cat_c + "_" + qua_c]);
    var answer = "Si prega di selezionare la data di interesse.";
  }
  var keyBoard = ({inline_keyboard: menu.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  sendText(user_id,answer,keyBoard);
}

// User: Click on "Other date" / "Select month" (e.g., /IT_99_99_99_OTH)
// Bot: Reply with a message asking to click on a year (based on the chosen language).
function year(user_id,input) {
  var lang  = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var cat_n = Number(input.substring(4,6));
  var cat_c = input.substring(4,6);
  var qua_n = Number(input.substring(7,9));
  var qua_c = input.substring(7,9);
  var fre_n = Number(input.substring(10,12));
  var fre_c = input.substring(10,12);  
  var unique = [];
  if (fre_n < 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }
  if (fre_n < 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (free_co_id[n] == fre_n && cate_co_id[n] == cat_n && unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (free_co_id[n] == fre_n && unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }  
  if (fre_n == 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (quar_co_id[n] == qua_n && unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (cate_co_id[n] == cat_n && unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < year_co.length; n++) {
          if (unique.join().indexOf(year_co[n].join()) == -1) {
            unique.push([String(year_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + String(year_co[n][0])]);
          }
        }
  }    
  if (lang == "EN") {
    unique.push(["<< Back"    ,"/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c]);
    var answer = "Please select the year of your interest.";
  }
  if (lang == "IT") {
    unique.push(["<< Indietro","/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c]);
    var answer = "Si prega di selezionare l'anno di interesse.";
  }
  var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  sendText(user_id,answer,keyBoard);
}

// User: Click on a year (e.g., /IT_99_99_99_2020)
// Bot: Reply with a message asking to click on a month (based on the chosen combination).
function month(user_id,input) {
  var lang  = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var cat_n = Number(input.substring(4,6));
  var cat_c = input.substring(4,6);
  var qua_n = Number(input.substring(7,9));
  var qua_c = input.substring(7,9);
  var fre_n = Number(input.substring(10,12));
  var fre_c = input.substring(10,12);
  var year  = Number(input.substring(13,17));
  var unique = [];
  if (fre_n < 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }
  if (fre_n < 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && cate_co_id[n] == cat_n && year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }  
  if (fre_n == 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (quar_co_id[n] == qua_n && year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (cate_co_id[n] == cat_n && year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (year_co[n] == year && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            unique.push([String(mont_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0])]);
          }
        }
  }
  if      (lang == "EN") var months_r = months_e;
  else if (lang == "IT") var months_r = months_i;
  for (var i = 0; i < unique.length; i++) {
    for (var j = 0; j < months_r.length; j++) {
      if (unique[i][0] == j+1) unique[i][0] = months_r[j];
    }
  }
  if (lang == "EN") {
    unique.push(["<< Back"    ,"/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_OTH"]);
    var answer = "Please select the month of your interest.";
  }
  if (lang == "IT") {
    unique.push(["<< Indietro","/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_OTH"]);
    var answer = "Si prega di selezionare il mese di interesse.";
  }
  var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  sendText(user_id,answer,keyBoard);
}

// User: Click on a month (e.g., /IT_99_99_99_2020_10)
// Bot: Reply with a message asking to click on a day (based on the chosen combination).
function day(user_id,input) {
  var lang  = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var cat_n = Number(input.substring(4,6));
  var cat_c = input.substring(4,6);
  var qua_n = Number(input.substring(7,9));
  var qua_c = input.substring(7,9);
  var fre_n = Number(input.substring(10,12));
  var fre_c = input.substring(10,12);
  var year  = Number(input.substring(13,17));
  var month = Number(input.substring(18,20));
  var unique = [];
  if (fre_n < 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < day_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && unique.join().indexOf(day_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }
  if (fre_n < 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && year_co[n] == year && mont_co[n] == month && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && year_co[n] == year && mont_co[n] == month && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }  
  if (fre_n == 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (quar_co_id[n] == qua_n && year_co[n] == year && mont_co[n] == month && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (year_co[n] == year && mont_co[n] == month && unique.join().indexOf(mont_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(day_co[n][0]), "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + String(mont_co[n][0]) + "_" + String(day_co[n][0])]);
          }
        }
  }  
  if (lang == "EN") {
    unique.push(["<< Back"    ,"/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year]);
    var answer = "Please select the day of your interest.";
  }
  if (lang == "IT") {
    unique.push(["<< Indietro","/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year]);
    var answer = "Si prega di selezionare il giorno di interesse."; 
  }
  var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  sendText(user_id,answer,keyBoard);
}

// User: Click on a day (e.g., /IT_99_99_99_2020_09_13)
// Bot: Reply with a message asking to click on an event based on the chosen language_year_month combination.
function event(user_id,input) {
  var lang  = input.substring(1,3);
  waitingMessage(lang,user_id);
  updateEvents();
  var cat_n = Number(input.substring(4,6));
  var cat_c = input.substring(4,6);
  var qua_n = Number(input.substring(7,9));
  var qua_c = input.substring(7,9);
  var fre_n = Number(input.substring(10,12));
  var fre_c = input.substring(10,12);
  var year  = Number(input.substring(13,17));
  var month = Number(input.substring(18,20));
  var day   = Number(input.substring(21,23));
  var unique = [];  
  if (fre_n < 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < day_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }
  if (fre_n < 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && quar_co_id[n] == qua_n && year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }  
  if (fre_n < 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (free_co_id[n] == fre_n && year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n < 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (quar_co_id[n] == qua_n && cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }  
  if (fre_n == 99 && qua_n < 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (quar_co_id[n] == qua_n && year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n < 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (cate_co_id[n] == cat_n && year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }   
  if (fre_n == 99 && qua_n == 99 && cat_n == 99) {
        for (var n = 0; n < mont_co.length; n++) {
          if (year_co[n] == year && mont_co[n] == month && day_co[n] == day && unique.join().indexOf(even_co[n].join()) == -1) {
            if (mont_co[n][0] < 10) mont_co[n][0] = "0" + mont_co[n][0];
            if (day_co[n][0] < 10) day_co[n][0] = "0" + day_co[n][0];
            unique.push([String(even_co[n][0]),String(link_co[n][0])]);
          }
        }
  }  
  if (unique.length == 0) {
    if (day < 10)   day   = "0" + day;
    if (month < 10) month = "0" + month;
    if (lang == "EN") {
      var answer = "<b>There are no events for the selected date.</b>\nPlease consider one of the following options:";
      unique.push(["Change day"     , "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + month]);
      unique.push(["Change month"   , "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year]);
      unique.push(["Change year"    , "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + "_NOE"]);
    }
    if (lang == "IT") {
      var answer = "<b>Non ci sono eventi per la data selezionata.</b>\nSi prega di considerare una delle seguenti opzioni:";
      unique.push(["Cambiare giorno", "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year + "_" + month]);
      unique.push(["Cambiare mese"  , "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + year]);
      unique.push(["Cambiare anno"  , "/" + lang + "_" + cat_c + "_" + qua_c + "_" + fre_c + "_" + "_NOE"]);
    }  
    var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),callback_data: String(x[1]),}])),});
  }
  else {
    if (lang == "EN") {
      var answer = "Please select the event of your interest clicking on the relative link.";
    }
    if (lang == "IT") {
      var answer = "Si prega di selezionare l'evento di proprio interesse cliccando sul relativo link.";
    }
    var keyBoard = ({inline_keyboard: unique.map((x) => ([{text: String(x[0]),url: String(x[1]),}])),});
  }
  sendText(user_id,answer,keyBoard);
}

function sendText(chatId,text,keyBoard) {
  keyBoard = keyBoard || 0;
  if(keyBoard.inline_keyboard || keyBoard.keyboard) {
    var data = {
      method: "post",
      payload: {
        method: "sendMessage",
        chat_id: String(chatId),
        text: text,
        parse_mode: "HTML",
        reply_markup: JSON.stringify(keyBoard)
      }
    }
  }
  else {
    var data = {
      method: "post",
      payload: {
        method: "sendMessage",
        chat_id: String(chatId),
        text: text,
        parse_mode: "HTML"
      }
    }
  }
  UrlFetchApp.fetch(telegram_url + '/', data);
}

function doPost(e) {
  // Telegram data
  var contents = JSON.parse(e.postData.contents);
  if (contents.callback_query) {
    var conte_na = contents.callback_query.from.first_name;
    var conte_id = contents.callback_query.from.id;
    var conte_te = contents.callback_query.data;
  }
  else if (contents.message) {
  var conte_na = contents.message.from.first_name;
  var conte_id = contents.message.from.id;
  var conte_te = contents.message.text;
  }
  // update events
  //updateEvents();
  // cases
       if (conte_te.indexOf("/start") > -1)                                                         start(conte_na,conte_id);
  else if (conte_te.indexOf("/credits") > -1)                                                       credits(conte_na,conte_id);
  else if (conte_te.indexOf("/today") > -1)                                                         today(conte_id);
  else if (conte_te.indexOf("/tomorrow") > -1)                                                      tomorrow(conte_id);
  else if (conte_te.indexOf("/lang")  > -1)                                                         lang(conte_id);
  else if (conte_te.length ==  3 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) category(conte_id,conte_te);
  else if (conte_te.length ==  6 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) quarter(conte_id,conte_te);
  else if (conte_te.length ==  9 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) freepaid(conte_id,conte_te);
  else if (conte_te.length == 12 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) cho_date(conte_id,conte_te); 
  else if (conte_te.length == 16 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) year(conte_id,conte_te);
  else if (conte_te.length == 17 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) month(conte_id,conte_te);
  else if (conte_te.length == 20 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) day(conte_id,conte_te);
  else if (conte_te.length == 23 && (conte_te.indexOf("/EN") > -1 || conte_te.indexOf("/IT") > -1)) event(conte_id,conte_te);
  else {
    var answer = "Parameter not valid, please click on /start to verify new events.";
    sendText(conte_id,answer);
  }
}
